{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"displayName": "Git",
	"description": "Git SCM-Integration",
	"command.clone": "Klonen",
	"command.init": "Repository initialisieren",
	"command.close": "Repository schließen",
	"command.refresh": "Aktualisieren",
	"command.openChange": "Änderungen öffnen",
	"command.openFile": "Datei öffnen",
	"command.openHEADFile": "Datei öffnen (HEAD)",
	"command.stage": "Änderungen bereitstellen",
	"command.stageAll": "Alle Änderungen bereitstellen",
	"command.stageSelectedRanges": "Gewählte Bereiche bereitstellen",
	"command.revertSelectedRanges": "Ausgewählte Bereiche zurücksetzen",
	"command.stageChange": "Änderung bereitstellen",
	"command.revertChange": "Änderung zurücksetzen",
	"command.unstage": "Bereitstellung der Änderungen aufheben",
	"command.unstageAll": "Bereitstellung aller Änderungen aufheben",
	"command.unstageSelectedRanges": "Bereitstellung gewählter Bereiche aufheben",
	"command.clean": "Änderungen verwerfen",
	"command.cleanAll": "Alle Änderungen verwerfen",
	"command.commit": "Commit",
	"command.commitStaged": "Commit bereitgestellt",
	"command.commitStagedSigned": "Bereitgestelltes committen (unterzeichnet)",
	"command.commitStagedAmend": "Gestaffelt committen (Ändern)",
	"command.commitAll": "Commit für alle ausführen",
	"command.commitAllSigned": "Alle committen (unterzeichnet)",
	"command.commitAllAmend": "Commit für alle ausführen (Ändern)",
	"command.undoCommit": "Letzten Commit rückgängig machen",
	"command.checkout": "Auschecken an...",
	"command.branch": "Branch erstellen...",
	"command.deleteBranch": "Branch löschen...",
	"command.renameBranch": "Branch umbenennen...",
	"command.merge": "Branch zusammenführen...",
	"command.createTag": "Tag erstellen",
	"command.fetch": "Abrufen",
	"command.pull": "Pull",
	"command.pullRebase": "Pull (Rebase)",
	"command.pullFrom": "Pullen von...",
	"command.push": "Push",
	"command.pushTo": "Push zu...",
	"command.pushWithTags": "Push mit Tags ausführen",
	"command.sync": "Synchronisierung",
	"command.syncRebase": "Sync (Rebase)",
	"command.publish": "Branch veröffentlichen",
	"command.showOutput": "Git-Ausgabe anzeigen",
	"command.ignore": "Datei zu .gitignore hinzufügen",
	"command.stashIncludeUntracked": "Stash (einschließlich nicht verfolgt)",
	"command.stash": "Stash ausführen",
	"command.stashPop": "Pop für Stash ausführen...",
	"command.stashPopLatest": "Pop für letzten Stash ausführen",
	"config.enabled": "Gibt an, ob Git aktiviert ist.",
	"config.path": "Der Pfad zur ausführbaren Git-Datei.",
	"config.autoRepositoryDetection": "Ob Repositorien automatisch erkannt werden sollen",
	"config.autorefresh": "Gibt an, ob die automatische Aktualisierung aktiviert ist.",
	"config.autofetch": "Gibt an, ob automatischer Abruf aktiviert ist.",
	"config.enableLongCommitWarning": "Gibt an, ob Warnungen zu langen Commitnachrichten erfolgen sollen.",
	"config.confirmSync": "Vor dem Synchronisieren von Git-Repositorys bestätigen.",
	"config.countBadge": "Steuert die Git-Badgeanzahl. \"Alle\" zählt alle Änderungen. \"tracked\" (Nachverfolgt) zählt nur die nachverfolgten Änderungen. \"off\" (Aus) deaktiviert dies.",
	"config.checkoutType": "Steuert, welcher Branchtyp beim Ausführen von \"Auschecken an...\" aufgelistet wird. \"alle\" zeigt alle Verweise an, \"lokal\" nur die lokalen Branches, \"Tags\" zeigt nur Tags an, und \"remote\" zeigt nur Remotebranches an.",
	"config.ignoreLegacyWarning": "Ignoriert die Legacy-Git-Warnung.",
	"config.ignoreMissingGitWarning": "Ignoriert die Warnung, wenn Git fehlt",
	"config.ignoreLimitWarning": "Ignoriert Warnung bei zu hoher Anzahl von Änderungen in einem Repository",
	"config.defaultCloneDirectory": "Das Standard-Verzeichnis für einen Klon eines Git-Repositorys",
	"config.enableSmartCommit": "Alle Änderungen committen, wenn keine bereitgestellten Änderungen vorhanden sind.",
	"config.enableCommitSigning": "Aktiviert das Signieren von Commits per GPG.",
	"config.discardAllScope": "Legt fest, welche Änderungen vom Befehl \"Alle Änderungen verwerfen\" verworfen werden. \"all\" verwirft alle Änderungen. \"tracked\" verwirft nur verfolgte Dateien. \"prompt\" zeigt immer eine Eingabeaufforderung an, wenn die Aktion ausgeführt wird.",
	"config.decorations.enabled": "Steuert, ob Git Farben und Badges für die Explorer-Ansicht und die Ansicht \"Geöffnete Editoren\" beiträgt.",
	"config.promptToSaveFilesBeforeCommit": "Legt fest, ob Git vor dem einchecken nach nicht gespeicherten Dateien suchen soll.",
	"config.showInlineOpenFileAction": "Steuert, ob eine Inlineaktion zum Öffnen der Datei in der Ansicht \"Git-Änderungen\" angezeigt wird.",
	"config.inputValidation": "Steuert, wann die Commit-Meldung der Eingabevalidierung angezeigt wird.",
	"config.detectSubmodules": "Steuert, ob Git-Submodule automatisch erkannt werden.",
	"config.detectSubmodulesLimit": "Steuert die Begrenzung der Git-Submodule.",
	"colors.modified": "Farbe für geänderte Ressourcen.",
	"colors.deleted": "Farbe für gelöschten Ressourcen.",
	"colors.untracked": "Farbe für nicht verfolgte Ressourcen.",
	"colors.ignored": "Farbe für ignorierte Ressourcen.",
	"colors.conflict": "Farbe für Ressourcen mit Konflikten.",
	"colors.submodule": "Farbe für Submodul-Ressourcen."
}