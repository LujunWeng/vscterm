{
	"displayName": "Git",
	"description": "Git SCM Integration",
	"command.clone": "Clone",
	"command.init": "Initialize Repository",
	"command.close": "Close Repository",
	"command.refresh": "Refresh",
	"command.openChange": "Open Changes",
	"command.openFile": "Open File",
	"command.openHEADFile": "Open File (HEAD)",
	"command.stage": "Stage Changes",
	"command.stageAll": "Stage All Changes",
	"command.stageSelectedRanges": "Stage Selected Ranges",
	"command.revertSelectedRanges": "Revert Selected Ranges",
	"command.stageChange": "Stage Change",
	"command.revertChange": "Revert Change",
	"command.unstage": "Unstage Changes",
	"command.unstageAll": "Unstage All Changes",
	"command.unstageSelectedRanges": "Unstage Selected Ranges",
	"command.clean": "Discard Changes",
	"command.cleanAll": "Discard All Changes",
	"command.commit": "Commit",
	"command.commitStaged": "Commit Staged",
	"command.commitStagedSigned": "Commit Staged (Signed Off)",
	"command.commitStagedAmend": "Commit Staged (Amend)",
	"command.commitAll": "Commit All",
	"command.commitAllSigned": "Commit All (Signed Off)",
	"command.commitAllAmend": "Commit All (Amend)",
	"command.undoCommit": "Undo Last Commit",
	"command.checkout": "Checkout to...",
	"command.branch": "Create Branch...",
	"command.deleteBranch": "Delete Branch...",
	"command.renameBranch": "Rename Branch...",
	"command.merge": "Merge Branch...",
	"command.createTag": "Create Tag",
	"command.fetch": "Fetch",
	"command.pull": "Pull",
	"command.pullRebase": "Pull (Rebase)",
	"command.pullFrom": "Pull from...",
	"command.push": "Push",
	"command.pushTo": "Push to...",
	"command.pushWithTags": "Push With Tags",
	"command.sync": "Sync",
	"command.syncRebase": "Sync (Rebase)",
	"command.publish": "Publish Branch",
	"command.showOutput": "Show Git Output",
	"command.ignore": "Add File to .gitignore",
	"command.stashIncludeUntracked": "Stash (Include Untracked)",
	"command.stash": "Stash",
	"command.stashPop": "Pop Stash...",
	"command.stashPopLatest": "Pop Latest Stash",
	"config.enabled": "Whether git is enabled",
	"config.path": "Path to the git executable",
	"config.autoRepositoryDetection": "Whether repositories should be automatically detected",
	"config.autorefresh": "Whether auto refreshing is enabled",
	"config.autofetch": "Whether auto fetching is enabled",
	"config.enableLongCommitWarning": "Whether long commit messages should be warned about",
	"config.confirmSync": "Confirm before synchronizing git repositories",
	"config.countBadge": "Controls the git badge counter. `all` counts all changes. `tracked` counts only the tracked changes. `off` turns it off.",
	"config.checkoutType": "Controls what type of branches are listed when running `Checkout to...`. `all` shows all refs, `local` shows only the local branches, `tags` shows only tags and `remote` shows only remote branches.",
	"config.ignoreLegacyWarning": "Ignores the legacy Git warning",
	"config.ignoreMissingGitWarning": "Ignores the warning when Git is missing",
	"config.ignoreLimitWarning": "Ignores the warning when there are too many changes in a repository",
	"config.defaultCloneDirectory": "The default location where to clone a git repository",
	"config.enableSmartCommit": "Commit all changes when there are no staged changes.",
	"config.enableCommitSigning": "Enables commit signing with GPG.",
	"config.discardAllScope": "Controls what changes are discarded by the `Discard all changes` command. `all` discards all changes. `tracked` discards only tracked files. `prompt` shows a prompt dialog every time the action is run.",
	"config.decorations.enabled": "Controls if Git contributes colors and badges to the explorer and the open editors view.",
	"config.promptToSaveFilesBeforeCommit": "Controls whether Git should check for unsaved files before committing.",
	"config.showInlineOpenFileAction": "Controls whether to show an inline Open File action in the Git changes view.",
	"config.inputValidation": "Controls when to show commit message input validation.",
	"config.detectSubmodules": "Controls whether to automatically detect git submodules.",
	"config.detectSubmodulesLimit": "Controls the limit of git submodules detected.",
	"colors.modified": "Color for modified resources.",
	"colors.deleted": "Color for deleted resources.",
	"colors.untracked": "Color for untracked resources.",
	"colors.ignored": "Color for ignored resources.",
	"colors.conflict": "Color for resources with conflicts.",
	"colors.submodule": "Color for submodule resources."
}